//@author: elliotwoods
//@help: Uncompress L16 which is stored in an RGBA8
//@tags: texture
//@credits: 

Texture2D<float4> texture2d : PREVIOUS;
float2 TargetSize : TARGETSIZE;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float2 PS(psInput input) : SV_Target
{
	float4 RGBA8 = texture2d.Load(int3(input.p.xy, 0));
		
	float2 result;
	result.r = (RGBA8.g + RGBA8.r / pow(2, 8));
	result.g = (RGBA8.a + RGBA8.b / pow(2, 8));
	return result;
}

technique10 Process
{
	pass P0
	<string format="R16G16_UNorm";>
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



